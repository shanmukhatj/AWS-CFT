Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Worker Network Configuration"
        Parameters:
          - PublicSubnet01Block
          - PublicSubnet02Block
          - PublicSubnet03Block
          - PrivateSubnet01Block
          - PrivateSubnet02Block
          - PrivateSubnet03Block
Parameters:

  PrivateSubnets:
    Type: String
    AllowedValues:
    - True
    - False
    Default: True
    Description: Do you want to create private subnets in addition to public subnets?

  NumberOfAZs:
    Type: Number
    AllowedValues:
    - 1
    - 2
    - 3
    Default: 2
    Description:  How many Availability Zones do you wish to utilize?

Conditions:
  BuildPublic02:         !Not [ !Equals [ !Ref NumberOfAZs, 1 ]]
  BuildPublic03:         !Equals [ !Ref NumberOfAZs, 3 ]    # Added Not  & changed 3 to 2
  BuildPrivateSubnets:   !Equals [ !Ref PrivateSubnets, True ]
  BuildPrivate01:        !Equals [ !Ref PrivateSubnets, True ]
  BuildPrivate02:        !And [ Condition: BuildPrivateSubnets, Condition: BuildPublic02 ]  #changed
  BuildPrivate03:        !And [ Condition: BuildPrivateSubnets, Condition: BuildPublic03 ]   # Added Not  & changed 3 to 2

                         # !Not [ !Equals [ !Ref NumberOfAZs, 1 ]] ###   !Not [ !Equals [ !Ref NumberOfAZs, 2 ]]
                         #!Or [ !Not [ !Equals [ !Ref NumberOfAZs, 1 ]], !Not [ !Equals [ !Ref NumberOfAZs, 3 ]] ]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/20
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-VPC'

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 01
    Properties:
      MapPublicIpOnLaunch: true
#      AvailabilityZone: !Select [ 0, GetAZs ]
      AvailabilityZone:
        Fn::Select:
          - '0'                           #changed from 0 to 1
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet01Block
      VpcId:
        Ref: VPC
        CidrBlock: 192.168.0.0/24
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet01"
        - Key: kubernetes.io/role/elb
          Value: 1

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Condition: BuildPublic02                      # added condition
    Metadata:
      Comment: Subnet 02
    Properties:
      MapPublicIpOnLaunch: true
      #      AvailabilityZone: !Select [ 1, GetAZs ]
      AvailabilityZone:
        Fn::Select:
          - '1'
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet02Block
      VpcId:
        Ref: VPC
        CidrBlock: 192.168.10.0/24
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet02"
        - Key: kubernetes.io/role/elb
          Value: 1

  PublicSubnet03:
    Type: AWS::EC2::Subnet
    Condition: BuildPublic03                  # added condition
    Metadata:
      Comment: Subnet 03
    Properties:
      MapPublicIpOnLaunch: true
      #      AvailabilityZone: !Select [ 2, GetAZs ]
      AvailabilityZone:
        Fn::Select:
          - '2'
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet03Block
      VpcId:
        Ref: VPC
        CidrBlock: 192.168.20.0/24
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet03"
        - Key: kubernetes.io/role/elb
          Value: 1

  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivate01        # Added condition
    Metadata:
      Comment: Subnet 01
    Properties:
      #      AvailabilityZone: !Select [ 0, GetAZs ]
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet01Block
      VpcId:
        Ref: VPC
        CidrBlock: 192.168.30.0/24
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet01"
        - Key: kubernetes.io/role/internal-elb
          Value: 1

  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivate02            #added condition
    Metadata:
      Comment: Subnet 02
    Properties:
      #      AvailabilityZone: !Select [ 1, GetAZs ]
      AvailabilityZone:
        Fn::Select:
          - '1'
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet02Block
      VpcId:
        Ref: VPC
        CidrBlock: 192.168.40.0/24
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet02"
        - Key: kubernetes.io/role/internal-elb
          Value: 1

  PrivateSubnet03:
      Type: AWS::EC2::Subnet
      Condition: BuildPrivate03   #added condition
      Metadata:
        Comment: Subnet 03
      Properties:
        #      AvailabilityZone: !Select [ 2, GetAZs ]
        AvailabilityZone:
          Fn::Select:
            - '2'
            - Fn::GetAZs:
                Ref: AWS::Region
        CidrBlock:
          Ref: PrivateSubnet03Block
        VpcId:
          Ref: VPC
          CidrBlock: 192.168.0.0/24
        Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName}-PrivateSubnet03"
          - Key: kubernetes.io/role/internal-elb
            Value: 1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Subnets
        - Key: Network
          Value: Public

  PublicRoute: # keep an eye on it: NO NAT GATE WAY
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRouteTable01:
    Type: AWS::EC2::RouteTable
    Condition: BuildPrivateSubnets     #added condition
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Subnet AZ1
        - Key: Network
          Value: Private01

  PrivateRouteTable02:
    Type: AWS::EC2::RouteTable
    Condition: BuildPrivateSubnets         #added condition
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Subnet AZ2
        - Key: Network
          Value: Private02

  PrivateRouteTable03:
    Type: AWS::EC2::RouteTable
    Condition: BuildPrivateSubnets     #added condition
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Subnet AZ3
        - Key: Network
          Value: Private03

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPublic02                      # added condition
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet03RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPublic03                      #added condition
    Properties:
      SubnetId: !Ref PublicSubnet03
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivate01                       #added condition
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref PrivateRouteTable01        #this may need change if wanted to, just remove nums in all

  PrivateSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivate02                          #added condition
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref PrivateRouteTable02

  PrivateSubnet03RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivate03                          #added condition
    Properties:
      SubnetId: !Ref PrivateSubnet03
      RouteTableId: !Ref PrivateRouteTable03

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPC

  NatGateway01:
    DependsOn:
      - NatGatewayEIP1
      - PublicSubnet01
      - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP1.AllocationId'
      SubnetId: !Ref PublicSubnet01
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-NatGatewayAZ1'

  NatGateway02:
    DependsOn:
      - NatGatewayEIP2
      - PublicSubnet02
      - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP2.AllocationId'
      SubnetId: !Ref PublicSubnet02
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-NatGatewayAZ2'

  NatGateway03:
    DependsOn:
      - NatGatewayEIP3
      - PublicSubnet03
      - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP3.AllocationId'
      SubnetId: !Ref PublicSubnet03
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-NatGatewayAZ3'

  NatGatewayEIP1:
    DependsOn:
      - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NatGatewayEIP2:
    DependsOn:
      - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NatGatewayEIP3:
    DependsOn:
      - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

Outputs:
  VPC:
    Description: VPC of the base network
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC
  PublicSubnet01:
    Description: First Public Subnet
    Value: !Ref PublicSubnet01
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet01
  PublicSubnet02:
    Description: Second Public Subnet
    Condition: BuildPublic02
    Value: !Ref PublicSubnet02
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet02
  PublicSubnet03:
    Description: Third Public Subnet
    Condition: BuildPublic03
    Value: !Ref PublicSubnet03
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet03
  PrivateSubnet01:
    Condition: BuildPrivateSubnets
    Description: First Private Subnet
    Value: !Ref PrivateSubnet01
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet01
  PrivateSubnet02:
    Condition: BuildPrivate02
    Description: Second Private Subnet
    Value: !Ref PrivateSubnet02
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet02
  PrivateSubnet03:
    Condition: BuildPrivate03
    Description: Third Private Subnet
    Value: !Ref PrivateSubnet03
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet03

